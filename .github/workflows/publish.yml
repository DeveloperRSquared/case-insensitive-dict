name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'

defaults:
  run:
    shell: bash

jobs:
  deploy_pypi:
    name: Deploy PyPI

    runs-on: ubuntu-latest

    environment:
      name: PyPI
      url: https://pypi.org/project/case-insensitive-dictionary/

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Set up python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Install poetry
        uses: snok/install-poetry@v1
        # with:
        #   version: 1.1.12

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install

      - name: Check package version == tag
        run: |
          source $(poetry env info --path)/bin/activate
          VERSION=$(poetry version --short)
          echo "Expected tag: refs/tags/v${VERSION}. Tag: ${{ github.ref }}."
          if [ "${{ github.ref }}" != "refs/tags/v${VERSION}" ]; then
            echo "Tag and expected tags do not match. Exiting ..."
            exit 1;
          fi

      - name: Build project for distribution
        run: poetry build

      - name: Publish to PyPI
        env:
          POETRY_HTTP_BASIC_PYPI_USERNAME: __token__
          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: poetry publish

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
